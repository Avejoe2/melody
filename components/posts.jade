dom-module#melody-posts
  template
    .ui.cards
      template(is="dom-repeat", items="{{items}}")
        .ui.fluid.card
          template(if="{{item.image}}")
            .image
              img(src="/img/maki-logo.png")
          .content
            .right.floated
              .icon.ellipsis.vertical
            .meta
              a(href="/people/{{item.author.slug}}") @{{item.author.name}}
              |  &middot; &nbsp; 
              a(href="/posts/{{item._id}}") {{item.created}}
            .description {{item.content}}
          //-.extra.content
            melody-post-controls(post="{{item}}")
  script.
    var prefix = '[MELODY:POSTS]';
    Polymer({
      is: 'melody-posts',
      listeners: {
        'datastore:query':  '_handleQuery',
        'state:change':     '_applyState'
      },
      properties: {
        src: {
          type: String,
          observer: '_sourceChanged',
          reflectToAttribute: true
        },
        type: {
          type: Object
        },
        items: {
          type: Array,
          notify: true
        },
        trusted: {
          type: Boolean
        }
      },
      _handleQuery: function(e, path) {
        var self = this;

        // disallow retrieval from remotes unless _explicitly_ allowed
        if (!self.trusted && !path.match('^/')) {
          var el = document.createElement('a');
          el.href = path;
          path = el.pathname;
        }

        var datastore = document.querySelector('maki-datastore[name=melody]');
        console.log(prefix, '_handleQuery:', e, path);
        if (!datastore) return console.error(prefix, 'no datastore');
        datastore._get(path, function(err, data) {
          console.log(prefix, 'get result:', err, data);
          if (!data) datastore.fire('datastore:miss', path);
          if (err) {
            console.error(prefix, '_handleQuery error:', err);
            data = [];
          }
          
          self.fire('state:change', data);
        });
      },
      _applyState: function(e) {
        console.log(prefix, 'event!', 'apply state call:', e);
        var self = this;
        var state = e.detail;
        
        if (!(state instanceof Array)) {
          state = [state];
        }

        self.items = state;
      },
      _sourceChanged: function(source, old) {
        var self = this;
        var melody = document.querySelector('melody-application');
        
        // TODO: what sets this value to http:// instead of a relative path?
        console.log(prefix, '_sourceChanged:', source, old);
        // TODO: merge with code in _handleQuery for `trusted` attribute
        if (source.match(/^http/i)) {
          var el = document.createElement('a');
          el.href = source;
          self.src = el.pathname;
          return;
        };
        
        // TODO: _sourceChanged is firing before the application exists (is
        // attached?), requiring this check.  There are many flow optimizations
        // to be made here.
        if (melody && melody.resourceMap) {
          self.type = melody.resourceMap[source];
        }
        
        self._sync();
      },
      _sync: function() {
        var self = this;
        console.log(prefix, '_sync');
        self.fire('datastore:query', self.src);
      },
      created: function() {
        var self = this;
        console.log(prefix, 'created');
      },
      ready: function() {
        var self = this;
        console.log(prefix, 'ready');
        self.src = '/posts';
      },
      attached: function() {
        var self = this;
        console.log(prefix, 'collection is attached:', self.src);
        var channel = document.querySelector('maki-channel');
        channel._subscribe(self.src);
      }
    });
