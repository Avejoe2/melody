dom-module#melody-application
  style.
    #navigation {
      width: 100%;
    }

  template
    maki-content-store(name="melody")
    maki-datastore(name="melody", for="melody")
    maki-channel(autoconnect, reconnect, namespace="melody")
    //-maki-service
    //-maki-peer-manager(autoconnect, limit="128", strategy="lowest-latency")

    .ui.page.grid
      .row
        .column#navigation
          .ui.large.labeled.icon.menu
            a.item(href="/")
              i.icon.left(class="#{ config.service.icon || 'lab' }")
              | #{config.service.name}
            maki-identity.right.menu(for="melody", autoselect)
      .row
        .column.content(for="viewport")
          melody-index

  script(src="/js/page.min.js", async)
  script(src="/assets/objectid.js", async)
  script(src="/assets/async.min.js", async)
  script.
    window.maki = Polymer({
      is: 'melody-application',
      properties: {
        src: {
          type: String
        },
        for: {
          type: String
        },
        route: {
          type: String
        },
        routes: {
          type: Object,
          value: {}
        },
        components: {
          type: Object,
          value: {}
        },
        resources: {
          type: Object,
          observer: '_resourcesUpdated'
        },
        datastore: {
          type: Object
        },
        worker: { type: Object },
        identity: {
          type: Object,
          notify: true
        },
        state: { type: String }
      },
      _pathToResource: function(path) {
        var self = this;
        var resource = null;
        console.log('[MELODY-APPLICATION]', '_pathToResource', path);
        for (var route in self.routes) {
          var regex = self.routes[route];
          console.log('[MELODY-APPLICATION]', '_pathToResource', 'testing', regex);
          if (regex.test(path)) {
            resource = self.resourceMap[route];
            break;
          }
        }

        console.log('[MELODY-APPLICATION]', '_pathToResource', path, 'finally:', resource);
        
        return resource;
      },
      _route: function(ctx) {
        var self = this;
        var viewport = document.querySelector('[for=viewport]');
        var component = 'maki-undefined';
        var view = null;
        for (var route in self.routes) {
          var regex = self.routes[route];
          console.log('[MELODY:APPLICATION]', '_route', 'routing', route, regex);
          console.log('[MELODY:APPLICATION]', '_route', 'comparing...', ctx.path);
          if (regex.test(ctx.path)) {
            component = self.components[route];
            console.log('[MELODY:APPLICATION]', '_route', 'found:', component);
            view = document.createElement(component);
            view.action = self.actionMap[route];
            view.type = self.resourceMap[route];
            view.type.route = route;
            
            console.log('[MELODY:APPLICATION]', '_route', 'selected:', view);
            break;
          }
        }

        if (!view) {
          view = document.createElement(component);
        }
        
        view.setAttribute('src', ctx.path);
        view.setAttribute('type', view.type);
        while (viewport.hasChildNodes()) {
          viewport.removeChild(viewport.lastChild);
        }
        viewport.appendChild(view);

      },
      /*
          Configures the Router, which provides human-friendly URLs 
      
       */
      _resourcesUpdated: function(resources) {
        var self = this;
        var _route = self._route.bind(self);
        self.resourceMap = {};
        self.actionMap = {};
        Object.keys(resources).forEach(function(name) {
          //var resource = resources[name];
          var resource = document.createElement('maki-resource');
          var definition = resources[name];
          
          resource.name = name;
          resource.definition = definition;
          
          resource._load();

          ['get', 'query'].forEach(function(action) {
            var route = definition.routes[action];
            if (!route) return;
            self.routes[route] = new RegExp(eval(definition.paths[action]));
            self.components[route] = definition.components[action];
            self.resourceMap[route] = resource;
            self.actionMap[route] = action;
            page(route, _route);
          });
        });
        
        self.routes['/'] = new RegExp(/^\/$/);
        self.components['/'] = (resources.Index && resources.Index.components) ? resources.Index.components.query : 'maki-index';
        
        page('/', _route);
        page('*', _route);
        
        page();
      },
      created: function() {
        var self = this;
        self.route = window.location.pathname;
        //self.worker = new Worker('/worker.js');
        // load the application configuration
        $.ajax({
          type: 'OPTIONS',
          url: '/',
          headers: {
            'Accept': 'application/json'
          },
          success: function(data) {
            self.config = data.config;
            self.resources = data.resources;
          }
        });
      },
      ready: function() {
        document.addEventListener('datastore:open', function() {
          self.datastore = document.querySelector('maki-datastore');
          self.datastore._sync();
        });
      }
    });
