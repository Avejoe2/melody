dom-module#melody-application
  style.
    #navigation {
      width: 100%;
    }

  template
    maki-datastore(name="melody")
    maki-channel(autoconnect, reconnect)
    //-maki-peer-manager(autoconnect, limit="128", strategy="lowest-latency")

    .ui.page.grid
      .row
        #navigation
          .ui.large.labeled.icon.menu
            a.item(href="/")
              i.icon.left(class="#{ config.service.icon || 'lab' }")
              | #{config.service.name}
            maki-identity.right.menu(autoselect)
      .row
        .column.content(for="viewport")
          melody-index
      .row
        .ui.one.column.stackable.center.aligned
          p
            small powered by <a href="http://github.com/martindale/melody">melody</a>.

  script(src="/js/page.min.js", async)
  //- TODO: remove jquery dependency
  script(src="/js/jquery.js", async)
  script.
    window.maki = Polymer({
      is: 'melody-application',
      properties: {
        src: {
          type: String
        },
        for: {
          type: String
        },
        route: {
          type: String
        },
        routes: {
          type: Object,
          value: {}
        },
        components: {
          type: Object,
          value: {}
        },
        resources: {
          type: Object,
          observer: '_resourcesUpdated'
        },
        datastore: {
          type: Object
        },
        worker: { type: Object },
        identity: {
          type: Object,
          notify: true
        }
      },
      _route: function(ctx) {
        var self = this;
        var viewport = document.querySelectorAll('[for=viewport]')[0];
        var component = 'maki-undefined';
        var view = null;
        for (var route in self.routes) {
          var regex = self.routes[route];
          if (regex.test(ctx.path)) {
            component = self.components[route];
            view = document.createElement(component);
            view.type = self.resourceMap[route];
            view.type.route = route;
            break;
          }
        }
        
        //console.log('[MELODY:APPLICATION]', 'settled on rendering:', view.type.route, view);
        //console.log('[MELODY:APPLICATION]', 'type.static:', view.type.static);
        //console.log('[MELODY:APPLICATION]', 'setting and appending...');
        
        //view.setAttribute('src', view.type.route);
        view.setAttribute('src', ctx.path);

        while (viewport.hasChildNodes()) {
          viewport.removeChild(viewport.lastChild);
        }
        viewport.appendChild(view);

      },
      _resourcesUpdated: function(resources) {
        var self = this;
        var _route = self._route.bind(self);

        self.resourceMap = {};
        
        console.log('[MELODY:APPLICATION]', '_resourcesUpdated', resources);

        var order = ['Person', 'Post', 'Index'];
        /**/Object.keys(resources).forEach(function(name) {
        /*/order.forEach(function(name) { */
          var resource = resources[name];
          console.log('[MELODY:APPLICATION]', 'initializing', name);
          ['get', 'query'].forEach(function(action) {
            console.log('[MELODY:APPLICATION]', 'looking for', action, 'in', resource.routes);
            var route = resource.routes[action];
            if (!route) return;

            console.log('[MELODY:APPLICATION]', 'components are:', resource.components);

            self.routes[route] = new RegExp(eval(resource.paths[action]));
            self.components[route] = resource.components[action];
            self.resourceMap[route] = resource;
            page(route, _route);
          });
        });
        
        self.routes['/'] = new RegExp(/^\/$/);
        self.components['/'] = (resources.Index && resources.Index.components) ? resources.Index.components.query : 'maki-index';
        
        page('/', _route);
        page('*', _route);
        
        page();
      },
      created: function() {
        var self = this;
        console.log('[MELODY:APPLICATION]', 'created');
        self.route = window.location.pathname;
        //self.worker = new Worker('/worker.js');
        
        $.ajax({
          type: 'OPTIONS',
          url: '/',
          headers: {
            'Accept': 'application/json'
          },
          success: function(data) {
            self.config = data.config;
            self.resources = data.resources;
          }
        });
      },
      ready: function() {
        /*window.addEventListener('datastore:open', function() {
          var datastore = document.querySelectorAll('maki-datastore')[0];
          datastore._sync();
        });*/
      }
    });
