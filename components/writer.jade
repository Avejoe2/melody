dom-module#melody-writer
  style.
    textarea[name=content] {
      height: inherit !important;
    }
  template
    template(is="dom-if", if="{{hasIdentity}}")
      form.ui.form.large(action="/posts", method="post")
        .ui.error.message
          //-i.icon.close(on-tap="_closeMessage")
          .header Something went wrong.
          p {{message}}
        .field
          label Content
          textarea(name="content", rows="2")
        .field.right.floated
          button.ui.right.floated.primary.submit.button(type="submit") Post
            i.icon.right.chevron
  script.
    Polymer({
      is: 'melody-writer',
      listeners: {
        // TODO: understand why this submit event is seemingly firing on the
        // custom element, when one would expect it to fire on the <form>
        // are events "bubbling" up through the DOM?
        //'submit': '_submit'
      },
      properties: {
        state: {
          type: String,
          observer: '_evaluateState',
          notify: true
        },
        message: {
          type: String
        },
        identity: {
          type: Object
        },
        hasIdentity: {
          type: Boolean,
          value: false
        }
      },
      _clean: function() {
      
      },
      _closeMessage: function() {
        $('.ui.error.message').transition('fade');
      },
      _submit: function(e) {
        e.preventDefault();
        
        var self = this;
        var form = self.querySelector('form');

        self.state = 'loading';
        // TODO: why must this be called manually?
        self._evaluateState();
        
        var elements = $(form).serializeArray();
        var post = {};
        
        elements.forEach(function(f) {
          post[f.name] = f.value;
        });

        var id = ObjectId().toString();
        
        // TODO: mongoose-style schemas, including default values
        post.id = id;
        post._id = id;
        post.created = new Date();
        post.identity = self.identity['@id'];

        var store = document.querySelector('maki-datastore[name=melody]');
        store._query('/people', {
          identity: post.identity
        }, function(err, people) {
          if (err) console.error('[MELODY:WRITER]', '_submit', err);
          console.log('[MELODY:WRITER]', '_submit', people);
          // TODO: better
          var author = people[0];
          post.author = author['@id'];
          
          console.log('DAT POST:', post);

          store._post('/posts', post, function(err, post) {
            console.log('[MELODY:WRITER]', '_submit', 'form happened', err, post);
            if (err) {
              self.message = data.responseText;
              self.state = 'error';
            } else {
              self.removeEventListener('submit', self._submit);
              self.replaceChild(document.createElement('melody-writer'), form);
            }
          });
        });
        return false;
      },
      _evaluateState: function(e) {
        var self = this;
        var form = self.querySelector('form');
        console.log('[MELODY:WRITER]', '_evaluateState');
        self.toggleClass('loading', (self.state === 'loading'), form);
        self.toggleClass('error', (self.state === 'error'), form);
      },
      _loadIdentity: function() {
        var self = this;
        var manager = document.querySelector('maki-identity');
        console.log('[MELODY:WRITER]', '_loadIdentity', 'manager', manager.identity);
        if (manager.identity) {
          self.identity = manager.identity;
          self.hasIdentity = true;
        } else {
          self.identity = null;
          self.hasIdentity = false;
        }
      },
      ready: function() {
        console.log('[MELODY:WRITER]', 'ready');
        var self = this;
        self.addEventListener('submit', self._submit);
      },
      attached: function() {
        var self = this;
        var manager = document.querySelector('maki-identity');
        var loader = self._loadIdentity.bind(self);

        document.removeEventListener('datastore:identity:open', loader);
        manager.removeEventListener('datastore:identity:open', loader);

        document.addEventListener('datastore:identity:open', loader, false);
        manager.addEventListener('identity', loader);

        self._loadIdentity();
      }
    });
